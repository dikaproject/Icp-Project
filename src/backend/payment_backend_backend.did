type User = record {
  id : principal;
  wallet_address : text;
  created_at : nat64;
  username : opt text;
  email : opt text;
  balance : nat64;
};

type Transaction = record {
  id : text;
  from : principal;
  to : principal;
  amount : nat64;
  fiat_currency : text;
  fiat_amount : float64;
  icp_amount : nat64;
  timestamp : nat64;
  status : TransactionStatus;
  qr_id : text;
  transaction_hash : opt text;
  fee : nat64;
};

type TransactionStatus = variant {
  Pending;
  Completed;
  Failed;
  Expired;
  Processing;
};

type QRCode = record {
  id : text;
  user_id : principal;
  fiat_amount : float64;
  fiat_currency : text;
  icp_amount : nat64;
  expire_time : nat64;
  created_at : nat64;
  is_used : bool;
  description : opt text;
};

type ExchangeRate = record {
  currency : text;
  rate : float64;
  timestamp : nat64;
  source : text;
};

type UserStats = record {
  total_sent : nat64;
  total_received : nat64;
  transaction_count : nat64;
  qr_codes_generated : nat64;
  total_topup : nat64;
  topup_count : nat64;
  current_balance : nat64;
};

type QRDisplayInfo = record {
  id : text;
  fiat_amount : float64;
  fiat_currency : text;
  icp_amount : nat64;
  formatted_fiat : text;
  formatted_icp : text;
  time_remaining_seconds : opt nat64;
  is_expired : bool;
  is_used : bool;
  description : opt text;
};

type TransactionSummary = record {
  id : text;
  amount_icp : text;
  amount_fiat : text;
  currency : text;
  status : text;
  timestamp : nat64;
  is_incoming : bool;
  counterpart : principal;
};

type SystemStats = record {
  total_users : nat64;
  total_transactions : nat64;
  total_qr_codes : nat64;
  cached_exchange_rates : nat64;
  completed_transactions : nat64;
  pending_transactions : nat64;
  failed_transactions : nat64;
  canister_balance : nat64;
};

type TopUpTransaction = record {
  id : text;
  user_id : principal;
  amount : nat64;
  fiat_amount : float64;
  fiat_currency : text;
  payment_method : TopUpMethod;
  payment_data : TopUpPaymentData;
  status : TopUpStatus;
  created_at : nat64;
  processed_at : opt nat64;
  reference_id : text;
};

type TopUpMethod = variant {
  QRIS;
  CreditCard;
  DebitCard;
  Web3Wallet;
};

type TopUpStatus = variant {
  Pending;
  Processing;
  Completed;
  Failed;
  Expired;
};

type TopUpPaymentData = record {
  qris_data : vec QRISData;
  card_data : vec CardData;
  web3_data : vec Web3Data;
};

type QRISData = record {
  qr_code_url : text;
  qr_code_data : text;
  merchant_id : text;
  expire_time : nat64;
};

type CardData = record {
  card_number : text;
  card_type : text;
  payment_gateway : text;
  transaction_id : text;
};

type Web3Data = record {
  wallet_address : text;
  blockchain_network : text;
  transaction_hash : opt text;
  confirmation_count : nat32;
};

type UserBalance = record {
  user_id : principal;
  balance : nat64;
  formatted_balance : text;
  last_updated : nat64;
};

type CardDataInput = record {
  card_number : text;
  expiry_month : text;
  expiry_year : text;
  cvv : text;
  cardholder_name : text;
};

type NetworkStats = record {
  active_countries : nat64;
  active_currencies : nat64;
  total_icp_volume : nat64;
  transactions_24h : nat64;
  transactions_7d : nat64;
  total_transactions : nat64;
  completed_transactions : nat64;
  pending_transactions : nat64;
  failed_transactions : nat64;
  total_users : nat64;
  currency_stats : vec CurrencyStatInfo;
  currency_countries : vec CurrencyCountryInfo;
};

type CurrencyStatInfo = record {
  currency : text;
  usage_count : nat64;
  total_fiat_volume : float64;
  total_icp_volume : nat64;
};

type CurrencyCountryInfo = record {
  currency : text;
  transaction_count : nat64;
};

// Add new types
type BalanceChangeLog = record {
  id : text;
  user_id : principal;
  change_type : BalanceChangeType;
  amount : nat64;
  previous_balance : nat64;
  new_balance : nat64;
  timestamp : nat64;
  reference_id : text;
  description : text;
};

type BalanceChangeType = variant {
  TopupCompleted;
  PaymentSent;
  PaymentReceived;
  FeeDeducted;
  Refund;
  Adjustment;
};

type QRUsageLog = record {
  id : text;
  qr_id : text;
  user_id : principal;
  used_by : principal;
  transaction_id : text;
  timestamp : nat64;
  usage_type : QRUsageType;
};

type QRUsageType = variant {
  PaymentCompleted;
  PaymentFailed;
  PaymentExpired;
};

type UserPreferences = record {
  user_id : principal;
  preferred_currency : text;
  notification_settings : NotificationSettings;
  ui_theme : text;
  language : text;
  timezone : text;
  updated_at : nat64;
};

type NotificationSettings = record {
  email_notifications : bool;
  push_notifications : bool;
  transaction_alerts : bool;
  marketing_emails : bool;
};

type UserSession = record {
  user_id : principal;
  session_id : text;
  created_at : nat64;
  last_activity : nat64;
  ip_address : text;
  user_agent : text;
  is_active : bool;
};

type Result = variant { Ok : User; Err : text };
type Result_1 = variant { Ok : ExchangeRate; Err : text };
type Result_2 = variant { Ok : QRCode; Err : text };
type Result_3 = variant { Ok : Transaction; Err : text };
type Result_4 = variant { Ok : QRDisplayInfo; Err : text };
type Result_5 = variant { Ok : TopUpTransaction; Err : text };
type Result_6 = variant { Ok : UserBalance; Err : text };
type Result_7 = variant { Ok : UserPreferences; Err : text };
type Result_8 = variant { Ok : UserSession; Err : text };

service : {
  // User management
  register_user : (text, opt text, opt text) -> (Result);
  update_user_profile : (opt text, opt text) -> (Result);
  get_user : () -> (opt User) query;
  get_user_by_id : (principal) -> (opt User) query;
  get_user_stats : () -> (opt UserStats) query;
  register_user_by_email : (text, opt text, text) -> (Result);
  check_email_availability : (text) -> (bool) query;
  get_user_by_email : (text) -> (opt User) query;
  
  // Exchange rates
  fetch_exchange_rate : (text) -> (Result_1);
  get_cached_exchange_rate : (text) -> (opt ExchangeRate) query;
  get_supported_currencies_list : () -> (vec text) query;
  
  // QR code management
  generate_qr : (float64, text, opt text) -> (Result_2);
  get_qr : (text) -> (opt QRCode) query;
  get_qr_display_info_by_id : (text) -> (opt QRDisplayInfo) query;
  get_user_qr_codes : () -> (vec QRCode) query;
  validate_qr_code : (text) -> (Result_4);
  
  // Transaction management
  process_payment : (text, opt text) -> (Result_3);
  get_transaction : (text) -> (opt Transaction) query;
  get_user_transactions : () -> (vec Transaction) query;
  get_user_transaction_summaries : () -> (vec TransactionSummary) query;
  get_recent_transactions_public : () -> (vec Transaction) query;
  get_network_stats : () -> (NetworkStats) query;
  get_all_transactions : () -> (vec Transaction) query;
  
  // System management
  get_system_stats : () -> (SystemStats) query;

  // Balance & Top-up Management
  get_user_balance : () -> (opt UserBalance) query;
  create_qris_topup : (float64, text) -> (Result_5);
  create_card_topup : (float64, text, CardDataInput, bool) -> (Result_5);
  claim_qris_payment : (text) -> (Result_5);
  get_topup_transaction : (text) -> (opt TopUpTransaction) query;
  get_user_topup_history : () -> (vec TopUpTransaction) query;
  
  // User preferences (MUTABLE)
  update_user_preferences : (opt text, opt NotificationSettings, opt text, opt text, opt text) -> (Result_7);
  get_user_preferences : () -> (opt UserPreferences) query;
  
  // Balance history (IMMUTABLE)
  get_user_balance_history : () -> (vec BalanceChangeLog) query;
  get_all_balance_changes : () -> (vec BalanceChangeLog) query;
  
  // QR usage history (IMMUTABLE)
  get_qr_usage_history : (text) -> (vec QRUsageLog) query;
  get_all_qr_usage_logs : () -> (vec QRUsageLog) query;
  
  // Session management (MUTABLE)
  create_user_session : (text, text) -> (Result_8);
  update_session_activity : (text) -> (Result_8);
  end_user_session : (text) -> (Result);
  get_active_sessions : () -> (vec UserSession) query;
  
  // Remove cleanup functions that violate immutability
  // cleanup_expired_transactions : () -> (nat64);
  // cleanup_expired_qr_codes : () -> (nat64);
  
  // Keep only cache cleanup (mutable data)
  cleanup_expired_rates : () -> (nat64);
  
  // HTTP transform
  transform_response : (record {
    context : blob;
    response : record {
      status : nat;
      body : blob;
      headers : vec record { text; text };
    };
  }) -> (record {
    status : nat;
    body : blob;
    headers : vec record { text; text };
  }) query;
}

